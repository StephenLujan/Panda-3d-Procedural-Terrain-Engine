//Cg
//Cg profile arbvp1 arbfp1

// shader contains  work by pro-rsoft and gsk from the panda3d forums


void vshader( in float4 vtx_position : POSITION,
	      in float3 vtx_normal : NORMAL,
              in float2 vtx_texcoord0 : TEXCOORD0,
              in float2 vtx_texcoord3 : TEXCOORD3,
              in uniform float4x4 mat_modelproj,
	      in uniform float4x4 trans_model_to_world,
	      in uniform float4 k_lightvec,
	      in uniform float4 k_lightcolor,
	      in uniform float4 k_ambientlight,
	      in uniform float4 k_tscale,
	      out float l_brightness,
	      out float4 l_mpos,
              out float2 l_texcoord0 : TEXCOORD0,
              out float2 l_texcoord3 : TEXCOORD3,
              out float4 l_position : POSITION)
{

  // worldspace position, for clipping in the fragment shader
  l_mpos = mul(trans_model_to_world, vtx_position);

  l_position=mul(mat_modelproj,vtx_position);
  l_texcoord0=vtx_texcoord0*k_tscale;
  l_texcoord3=vtx_texcoord3;

  // lighting
  float3 N = normalize( vtx_normal );
  float3 L = normalize( k_lightvec.xyz );
  l_brightness = (max( dot( -N, L ), 0.0f )*k_lightcolor)+k_ambientlight;
}


void fshader( in float4 l_position : POSITION,
              in float2 l_texcoord0 : TEXCOORD0,
              in float2 l_texcoord3 : TEXCOORD3,
              in uniform float4 region1Limits : REGION1LIMITS,
              in uniform float4 region2Limits : REGION2LIMITS,
              in uniform float4 region3Limits : REGION3LIMITS,
              in uniform float4 region4Limits : REGION4LIMITS,
	      in float  l_brightness,
	      in float4 l_mpos,
	      in uniform float4 k_waterlevel,
              in uniform sampler2D region1ColorMap : TEXUNIT0,
              in uniform sampler2D region2ColorMap : TEXUNIT1,
              in uniform sampler2D region3ColorMap : TEXUNIT2,
              in uniform sampler2D region4ColorMap : TEXUNIT3,
              in uniform sampler2D detailTexture   : TEXUNIT4,
              out float4 o_color : COLOR )
{
    // clipping
    //if ( l_mpos.z < k_waterlevel.z) discard;

    vec4 terrainColor = float4(0.0, 0.0, 0.0, 1.0);
    float height = l_mpos.z;
    float regionRange = 0.0;
    float regionWeight = 0.0;

    float2 detailTexCoord= l_texcoord0*8.0;
    float4 detailTexCompensation = float4(0.05, 0.05, 0.05, 0.0);

    // Terrain region 1.
    if (height < region1Limits.x && height > region1Limits.y)
    {
        if (height > region2Limits.y)
            regionWeight =  1.0 - (( height - region2Limits.y) / ( region1Limits.x - region2Limits.y ));
        else regionWeight = 1.0;

        terrainColor += regionWeight * tex2D(region1ColorMap, l_texcoord0) * tex2D(detailTexture, detailTexCoord);
    }


    // Terrain region 2.
    if (height < region2Limits.x && height > region2Limits.y)
    {
        if (height > region3Limits.y)
            regionWeight =  1.0 - (( height - region3Limits.y) / ( region2Limits.x - region3Limits.y ));
        else if (height < region1Limits.x)
            regionWeight = 1.0 - (( region1Limits.x - height ) / ( region1Limits.x - region2Limits.y ));
        else regionWeight = 1.0;

        terrainColor += regionWeight * tex2D(region2ColorMap, l_texcoord0) * tex2D(detailTexture, detailTexCoord);
    }

    // Terrain region 3.
    if (height < region3Limits.x && height > region3Limits.y)
    {
        if (height > region4Limits.y)
            regionWeight =  1.0 - (( height - region4Limits.y) / ( region3Limits.x - region4Limits.y ));
        else if (height < region2Limits.x)
            regionWeight = 1.0 - (( region2Limits.x - height ) / ( region2Limits.x - region3Limits.y ));
        else regionWeight = 1.0;

        terrainColor += regionWeight * tex2D(region3ColorMap, l_texcoord0) * tex2D(detailTexture, detailTexCoord);
    }

    // Terrain region 4.
    if (height < region4Limits.x && height > region4Limits.y)
    {
        if (height < region3Limits.x)
            regionWeight = 1.0 - (( region3Limits.x - height ) / ( region3Limits.x - region4Limits.y ));
        else regionWeight = 1.0;

        terrainColor += regionWeight * tex2D(region4ColorMap, l_texcoord0) * tex2D(detailTexture, detailTexCoord);
    }

    // alpha splatting and lighting
    //brightened up slightly to compensate for detail texture
    //o_color=(terrainColor+detailTexCompensation)*(l_brightness)*1.3;
    //o_color=terrainColor*l_brightness;
    o_color=float4(0.8, 0.8, 0.8, 1.0)*l_brightness*l_brightness*l_brightness; //brightness test
    o_color = (o_color*o_color + o_color) / (o_color*o_color + o_color + float4(1.0, 1.0, 1.0, 1.0));
    o_color.a=1.0;
}
